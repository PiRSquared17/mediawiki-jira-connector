package com.atlassian.jira.rpc.soap.util;

import com.atlassian.jira.exception.DataAccessException;
import com.atlassian.jira.soap.axis.SoapAttachmentHelper;
import org.apache.axis.AxisFault;
import org.apache.axis.MessageContext;
import org.apache.axis.attachments.AttachmentPart;
import org.apache.axis.attachments.Attachments;
import org.apache.axis.client.Call;
import org.apache.axis.client.Stub;
import org.apache.log4j.Logger;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Iterator;

public class PluginSoapAttachmentHelper implements SoapAttachmentHelper
{
    private static final Logger log = Logger.getLogger(PluginSoapAttachmentHelper.class);
    
    private final String attachmentsDir = System.getProperty("java.io.tmpdir");
    private static final String UNKOWN_FILE = "UnknownAttachment";


    public PluginSoapAttachmentHelper()
    {
    }

    /**
     * This method is used for adding files as attachments for SOAP calls
     *
     * @param stub          THe Axis SOAP stub generated by Axis
     * @param fileLocations list of files to be attached from the local client file system
     * @return attachment file names
     */
    public synchronized String[] addFiles(Stub stub,
            String[] fileLocations)
    {
        String[] fileNames = new String[fileLocations.length];
        for (int i = 0; i < fileLocations.length; i++)
        {
            File file = new File(fileLocations[i]);
            String fileName = file.getName();
            fileNames[i] = fileName;
            // Use classes from the Java Activation Framework
            // (import activation.jar) to wrap the attachment.
            DataHandler attachmentFile = new DataHandler(new FileDataSource(file));

            // Tell the stub that the message being formed also
            // contains an attachment, and it is of type MIME
            // encoding.
            stub._setProperty(Call.ATTACHMENT_ENCAPSULATION_FORMAT,
                    Call.ATTACHMENT_ENCAPSULATION_FORMAT_MIME);

            //Add the attachment to the message
            stub.addAttachment(attachmentFile);
        }
        return fileNames;
    }

    /**
     * This method receives the attachment from the client and saves it on the temp directory on the
     * server
     *
     * @param attachmentFileNames scontaining the file names of the attachments.
     * @return File[] containing the File objects of the attachments.
     */
    public synchronized File[] saveFile(String[] attachmentFileNames) throws java.rmi.RemoteException
    {
        try
        {
            // Get all the attachments
            AttachmentPart[] attachments = getMessageAttachments();
            File[] returnedFiles = new File[attachments.length];

            // Do some validation - and attempt to make the best out of a bad situation...
            if (attachments.length > attachmentFileNames.length)
            {
                log.warn("There are more attachments than stated names. They may be corrupted.");
                String[] oldFileNames = (String[]) attachmentFileNames.clone();
                attachmentFileNames = new String[attachments.length];
                for (int i = 0; i < attachmentFileNames.length; i++)
                {
                    if (i < oldFileNames.length)
                    {
                        attachmentFileNames[i] = oldFileNames[i];
                    }
                    else
                    {
                        attachmentFileNames[i] = UNKOWN_FILE;
                    }
                }
            }

            // Extract each attachment.
            for (int i = 0; i < attachments.length; i++)
            {
                DataHandler dh = attachments[i].getDataHandler();

                // Extract the file name of the first attachment.
                String name = attachmentFileNames[i];
                log.debug("File received on server is: " + name);

                // Write temp file
                File file = new File(attachmentsDir, name);
                OutputStream os = new FileOutputStream(file);
                dh.writeTo(os);
                os.close();

                returnedFiles[i] = file;
            }

            return returnedFiles;
        }
        catch (Exception e)
        {
            log.error("Unable to save file(s): " + e, e);
            AxisFault af = new AxisFault();
            af.setFaultCodeAsString("Server.UnableToSave");
            af.setFaultReason("Unable to save file(s): " + e);
            throw af;
        }
    }

    public synchronized void relayAttachments(Stub stub) throws java.rmi.RemoteException
    {
        try
        {
            // Sets the data type
            stub._setProperty(Call.ATTACHMENT_ENCAPSULATION_FORMAT,
                    Call.ATTACHMENT_ENCAPSULATION_FORMAT_MIME);

            // Get all the attachments
            AttachmentPart[] attachments = getMessageAttachments();

            // Extract each attachment.
            for (int i = 0; i < attachments.length; i++)
            {
                DataHandler dh = attachments[i].getDataHandler();
                //Add the attachment to the message
                stub.addAttachment(dh);
            }
        }
        catch (Exception e)
        {
            log.error(e);
        }
    }

    public DataHandler[] getDataHandlers()
    {
        try
        {
            AttachmentPart[] attachmentParts = getMessageAttachments();

            DataHandler[] attachments = new DataHandler[attachmentParts.length];

            for (int i = 0; i < attachmentParts.length; i++)
            {
                AttachmentPart attachmentPart = attachmentParts[i];
                attachments[i] = attachmentPart.getDataHandler();
            }

            return attachments;
        }
        catch (Exception axisFault)
        {
            log.error(axisFault);
            return null;
        }
    }


    /**
     * extract attachments from the current request
     *
     * @return a list of attachmentparts or an empty array for no attachments support in this axis
     *         buid/runtime
     */
    private AttachmentPart[] getMessageAttachments() throws AxisFault
    {
        Attachments messageAttachments = MessageContext.getCurrentContext().getRequestMessage().getAttachmentsImpl();

        if (null == messageAttachments)
        {
            log.warn("No attachment support");
            return new AttachmentPart[0];
        }
        else
        {
            int attachmentCount = messageAttachments.getAttachmentCount();
            AttachmentPart attachments[] = new AttachmentPart[attachmentCount];
            Iterator it = messageAttachments.getAttachments().iterator();
            int count = 0;
            while (it.hasNext())
            {
                AttachmentPart part = (AttachmentPart) it.next();
                attachments[count++] = part;
            }
            return attachments;
        }
    }

    public static PluginSoapAttachmentHelper getInstance()
    {
        return new PluginSoapAttachmentHelper();
    }

    public File byteArrayToTempFile(byte buffer[])
    {
        if (buffer.length > 0)
        {
            FileOutputStream destFile = null;
            // Open the file and write all bytes to it.
            try
            {
                File tempFile = File.createTempFile("jira-soap", "tmp");

                destFile = new FileOutputStream(tempFile);
                DataOutputStream fstream = new DataOutputStream(destFile);

                // Write the bytes.
                fstream.write(buffer, 0, buffer.length);
                fstream.flush();

                return tempFile;
            }
            catch (IOException e)
            {
                throw new DataAccessException("Unable to write to temp file for SOAP", e);
            }
            finally
            {
                if (destFile != null)
                {
                    try
                    {
                        destFile.close();
                    }
                    catch (IOException e2)
                    {
                        throw new DataAccessException("Unable to close file for SOAP", e2);
                    }
                }
            }
        }
        else
        {
            return null;
        }
    }
}
